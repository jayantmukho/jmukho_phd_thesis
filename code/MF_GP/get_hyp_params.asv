function [hyp,hyp_tot] = get_hyp_params(x_meas, y, sigma, covfunc, init_guess)
% Created by Andrew Wendorff and Brian Whitehead based on the work by
% Kennedy and O'Hagan (2000)
% Inputs:
% x_meas  - 1 by number of fidelity levels cell containing the flight 
%           conditions for the number of fidelity levels considered where 
%           each different fidelity level can have a arbitrary number of 
%           data points
%           
% y       - 1 by number of fidelity levels cell containing aerodynamic 
%           coefficients of interest for the number of fidelity levels 
%           considered where each different fidelity level can have an 
%           arbitrary number of data points
%
% sigma   - 1 by number of fidelity levels cell containing the externally 
%           provided error estimate of the aerodynamic coefficient provided
%           by y where the length of vector inside the cell of sigma and y 
%           must match
%
%
% covfunc - covariance function to be utilized over the domain
% Outputs: 
% hyp     - 1 by number of fidelity level cell containing hyperparameters
% for the identified GP models

n = length(x_meas);
nD  = size(x_meas{1},2); % dimension of the domain

% Outputs to Command Window if set equal to 1
msgs_on     = 1;

for i = 1:n;
    if msgs_on
        disp(sprintf('Begin processing Fidelity %d',i))
    end 
    
    % Learn hyper-parameters
    if i == 1;
        % Correct the lowest fidelity by the mean of the high fidelity to
        % account for bias in the error. Could instead subtract the mean of
        % the lowest fidelity data, but correcting by the mean of the high
        % fidelity produced better results.
        y_me{i} = y{i}-mean(y{n}); 
        % Learn the hyper-paramters
        [hyp{i}] = Learn_hyp(x_meas{i},y_me{i},sigma{i},covfunc,init_guess);
    else
        % Generate the mean of the multi-fidelity Gaussian Process at the
        % next fidelity level data sample locations
        %[Mu_comb] = get_Mu_Q_MF(x_meas(1:i-1),y(1:i-1),x_meas{i},hyp(1:i-1),covfunc);
        % Calculate the difference between fidelity levels
        y_corr = y{i};% - Mu_comb;
        % Zero mean the data before learning the hyper-parameters
        y_me = y_corr;% -  mean(y_corr);
        % Learning the hyper-parameters for the additive model 
        [hyp{i}] = Learn_hyp(x_meas{i},y_me,sigma{i},covfunc,init_guess);
    end
    
%     if msgs_on
%     hyp{i}
%     end
    
    % Learning the hyper-parameters of the different fidelity levels to be
    % employed in the final scaling
    hyp_tot{i}  = Learn_hyp(x_meas{i},y{i}-mean(y{n}),sigma{i},covfunc,init_guess);

    
    if msgs_on
    hyp_tot{i}
    end
    
    % Add covariance terms to create covariance cell needed for the
    % multi-fidelity model
    covfunc2{i} = covfunc;
end

